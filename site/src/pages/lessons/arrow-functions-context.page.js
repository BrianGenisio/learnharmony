export var page = {
    "title": "Arrow Functions (context)",
    "navGroup": ".lessons",
    "next": "lessons/destructuring",
    "nextText": "Now, let's learn about variable Destructuring.",
    "heading": "Arrow Functions -- Context",
    "code": "// this === window\nlet printThis = () => console.log(this.toString());\n\nprintThis();\nprintThis.call({thisIs: 'window'});\nprintThis.apply({thisIsAlso: 'window'});\nprintThis.bind({thisIsStill: 'window'})();",
    "intro": "<h3 id=\"how-are-arrow-functions-different-from-regular-functions-\">How are Arrow Functions different from regular functions?</h3>\n<p>There are two differences:</p>\n<ol>\n<li><p><strong>Function context (this) has lexical scope</strong>\nBasically, this means that <code>this</code> is the <code>this</code> from the scope that defines the function, not the context that calls you. Context modifiers (<code>call</code>, <code>apply</code>, <code>bind</code>, etc) have no affect over the value of <code>this</code>.  See the example below</p>\n</li>\n<li><p><strong>Arror Functions are not constructors</strong>\nYou can&#39;t use the &quot;new&quot; operator on Arror Functions.  In other words, this will result in a type error:</p>\n<pre><code><span class=\"hljs-reserved\">let</span> N<span class=\"hljs-function\"><span class=\"hljs-title\">otGood</span> = <span class=\"hljs-params\">()</span> =&gt;</span> {};\n<span class=\"hljs-reserved\">let</span> wontWork = <span class=\"hljs-keyword\">new</span> NotGood();\n</code></pre></li>\n</ol>\n<blockquote>\n<p>Note: this repl loop won&#39;t display this behavior, but don&#39;t let it fool you.  The spec doesn&#39;t allow it.</p>\n</blockquote>\n"
};