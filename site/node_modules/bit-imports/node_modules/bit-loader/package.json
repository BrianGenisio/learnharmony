{
  "name": "bit-loader",
  "version": "0.2.5",
  "description": "Framework for building module loaders with very little effort",
  "main": "src/bit-loader.js",
  "directories": {
    "test": "tests"
  },
  "keywords": [
    "module",
    "modules",
    "import",
    "loader"
  ],
  "scripts": {
    "prepublish": "grunt build",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/MiguelCastillo/bit-loader.git"
  },
  "author": {
    "name": "Miguel Castillo",
    "email": "manchagnu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MiguelCastillo/bit-loader/issues"
  },
  "homepage": "https://github.com/MiguelCastillo/bit-loader",
  "devDependencies": {
    "bit-imports": "",
    "bluebird": "^2.9.25",
    "browserify": "~10.1.3",
    "chai": "~2.3.0",
    "grunt": "~0.4.5",
    "grunt-banner": "^0.4.0",
    "grunt-browserify": "~3.8.0",
    "grunt-concurrent": "~1.0.0",
    "grunt-contrib-connect": "~0.10.1",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-contrib-uglify": "~0.9.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha": "~0.4.12",
    "grunt-release": "~0.13.0",
    "jshint-stylish": "~1.0.2",
    "mocha": "~2.2.4",
    "sinon": "~1.14.1"
  },
  "dependencies": {
    "roolio": "~0.1.0",
    "spromise": "~0.9.3"
  },
  "browser": {
    "promise": "spromise",
    "logger": "./src/logger.js"
  },
  "readme": "<img src=\"img/bit-loader_white.png\" width=\"100%\"></img>\n\n[![Build Status](https://travis-ci.org/MiguelCastillo/bit-loader.svg?branch=master)](https://travis-ci.org/MiguelCastillo/bit-loader) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/MiguelCastillo/bit-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n## Introduction\n\n> Framework for building module loaders with *very* little effort.\n\nbit loader is a framework that can be very easily configured to build your own module loader. It is modeled after [this](http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders) module loader sudo spec that has been bounced to possibly ES7.\n\nBelow you will find examples on how to set `fetch`, `transform`, `compile`, and other plugins and hooks to enable you to create a module loader with little effort. So the expectation is that you can configure bit loader to load and process modules.\n\nYou can take a look at [bit imports](https://github.com/MiguelCastillo/bit-imports), which is a module loader built on top of bit loader, with support for `AMD`, `CJS`, and `ES2015` modules via babel or any other transpiler.\n\n## Why use this?\n\nThis is an overloaded question...\n\n1. Its simple to setup your own module loader with the [core hooks](#core-layer-and-hooks).\n2. Its flexible processing [pipelines](#pipelines) with a [plugin](#plugins) system.\n3. Its designed to run in the browser and nodejs. So you can set things up to run directly in the browser during your development cycles without needing a \"compile -> bundle -> deploy\" step.\n\n## Examples\n\nPlease checkout the [examples](./example).  There you will find different recipes for settings things up.\n\n\n## Build and other tasks\n\n#### build\n```\n$ npm install\n$ grunt build\n```\n\nAll build artifacts will be in the `dist` folder.\n\n\n#### test\n```\n$ grunt test\n```\n\n## Architecture Overview\n\nbit loader is composed of a two stage workflow. One workflow is responsible for loading and processing files via puggable pipelines. And a second workflow is for building modules that can be consumed by the host application.\n\n#### The pluggable pipelines\n\n- **resolve** - responsible for generating paths to read module files from storage.\n- **fetch** - responsible for loading files from storage.\n- **transform** - responsible for processing and transforming loaded files.  E.g. ES6 to ES5 via babeljs. Or CoffeeScript to JavaScript.\n- **dependency** - responsible for parsing out dependencies from the loaded files.\n- **compile** - responsible for converting loaded files to consumable code for the host application.  E.g. Text to JSON.\n\nThese four pipelines are pluggable, which means that you can register handler functions to process data in any of these pipelines. These pipelines are executed sequentially in the order listed above, with each pipeline feeding data from one to the next.\n\nMore details on how to hook into the pipelines can be found in the [plugins](#plugins) section. More details on each pipeline can be found [here](#pipelines).\n\n#### The build stage\n\n>The build stage (compile + linking) is where the *transformed files* are converted to *evaluated code*, which is what a module ultimately represents and the host application consumes.\n\nThe build stage is synchronous, which has the implication that module files and their dependencies can be processed asynchronously in the first stage, and the modules created in the build stage can be consumed by the application synchronously.\n\nThe combination of an *asynchronous* processing workflow with a *synchronous* build workflow enables support for `CJS`,`AMD`, and `ES6 modules` simultaneously.\n\n\n## Pipelines\n\n> Each pipeline has a very speific reponsibility.\n\n#### Resolve\n\nFirst, we need to be able to convert module names (ids) to paths we can use to read module files from storage. The paths generated by this pipeline will be consumed by the fetch pipeline, so resolve is generally aware of the environment it is running in.\n\n#### Fetch\n\nOnce we have a proper path for the module file, we ought to read the module files from storage. Storage can be local file system as it could be in the case of nodejs, from a remote server via XHR, or just text from a websocket. bit loader does not need to know the semantics of how module files are read from storage...  But it needs to tell you when to load them so that module files can be passed on to the next pipeline.\n\n#### Transform\n\nOnce module files are fetched (read from storage), we generally process their content in some way or another.\n\nFor example, reading a Markdown file from storage is just text but to really make use of it when rendering to screen, you generally convert it to HTML. Or maybe you have JavaScript code written in ES2015 (or later) and want to transform it to good ole ES5 so that older browsers can run your code. You can setup a [babel](https://babeljs.io/) transform to handle this. And that's exactly what the transform pipeline is for -- for processing module files so that can eventually be consumed by the host application.\n\nOnce all configured transforms get a chance to execute, the transform pipeline feeds the processed module files to the next pipeline called dependency.\n\n#### Dependency\n\nAn important part of the lifecycle of a module is loading dependencies on other modules, and this is where we get a chance to tell bit loader to load them up. For example, we can parse `require` statements in JavaScript files so that bit loader can load those up automatically for us.\n\nThe most important part of this particular step is that all dependencies generated in this pipeline will go through all the pipelines before the current module is further processed. So by the time the module files have been processed in this pipeline, all module dependencies have been fully loaded and the current module can be compiled.\n\n#### Compile\n\nThe last pipeline is compile. This is where we take all processed module files and convert them to code that can be consumed by the host application.  For example, we can load a JSON file but up until this compile step, it is just text. So before we can hand that over to the host application, we have to convert it from text to a valid JSON object - possibly via `JSON.parse`. That's the point of the compilation step - convert processed text to code that's consumable by the host application.\n\n---\n\nSome of these pipelines may or may not be useful for different file types. For example, loading up a JSON file probably would not need the transform or dependency pipelines. So we would probably only register a plugin with fetch and compile handlers. JavaScript on the other hand might need all the pipelines. All this means is that you need to be aware of how you need to process your assets.\n\n\n## Plugins\n\nPlugins are the primary vehicle for registering handler functions into the different pipelines to load and process module files. Below is a sample plugin called `css` that's registering a handler method for fetching module files from storage:\n\n``` javascript\nvar bitloader = new Bitloader();\n\nbitloader.plugin(\"css\", {\n  fetch: fetchCss\n});\n```\n\nYou can also register handler functions for transforming module files. Building on the `css` plugin example, we can register two handler functions in the transformation pipeline as follows:\n\n``` javascript\nvar bitloader = new Bitloader();\n\nbitloader.plugin(\"css\", {\n  transform: [cssTransform1, cssTransform2]\n});\n```\n\nYou can configure matching rules in a plugin to specify which module files the plugin can process. Below is an example configuring the `css` plugin to only process files with `.css` and `.less` extensions:\n\n``` javascript\nvar bitloader = new Bitloader();\nvar extension = Bitloader.Rule.matcher.extension;\n\nbitloader.plugin(\"css\", {\n  match: {\n    path: extension(\"css|less\")\n  }\n});\n```\n\n> There are several built in matching rules.  One for file extensions, one for string matching, another for regex, and one for generic strict equality comparison.\n\nSo, it is valid to register other handlers into a previously registered plugin using the plugin name, which is the primary reason plugins have names in the first place. But the more common use case is to configure plugins in a single call:\n\n#### Plugin example\n\n``` javascript\nvar bitloader = new Bitloader();\nvar extension = Bitloader.Rule.matcher.extension;\n\nbitloader.plugin(\"css\", {\n  match: {\n    path: extension(\"css|less\")\n  },\n  fetch: fetchCss,\n  transform: [cssTransform1, cssTransform2]\n});\n```\n\nYou can take a look at [this](https://gist.github.com/MiguelCastillo/37944827c0caee3c0e1a) configuration that shows a more elaborate plugin setup.\n\n\n## Core layer and hooks\n\nbit loader is a *JavaScript module loader* first, and plugins are a way to augment the types of modules that can be loaded and consumed by the host application.  So, while bit loader provides you with a very flexible plugin system for processing modules, there is a layer of core function hooks that are the default handlers when plugins can't process a particular module.\n\n- **resolve** - *function* that converts module names (ids) to paths. Paths are used by `fetch` plugins and core hooks to load module files.\n- **fetch** - *function* that loads module files from storage. These files are processed by `compile` plugins and core hooks to build modules.\n- **compile** - *function* that evaluates module files with `eval`, or other equivalent mechanism to create code that can be consumed by the host application.\n\nSo, plugins and their core function hook counterparts have fundamentally the same responsibilities. However, the one function hook that has real implications is `compile`; `compile` core hook and plugins primarly differ in when and how they run.\n\nAll plugins run in the first stage, which is *asynchronous* and runs before the build stage. This means that `compile` plugins are *asynchronous* and run before the `compile` core hook in the build stage, which is *synchronous*.\n\n> [bit imports](https://github.com/MiguelCastillo/bit-imports) implements these core hooks to provide a base layer for processing JavaScript modules.\n\n#### Core hooks example\n``` javascript\nfunction resolvePath(moduleMeta) {\n  moduleMeta.configure({\n    path: \"path/to/module/\" + moduleMeta.name\n  });\n}\n\nfunction loadFile(moduleMeta) {\n  return Promise.resolve(ajax(moduleMeta.path))\n    .then(function(text) {\n      moduleMeta.configure({\n        source: text\n      });\n    });\n}\n\nfunction compileModule(moduleMeta) {\n  moduleMeta.configure({\n    code: eval(moduleMeta.source)\n  });\n}\n\n\n//\n// Instantiate bitloader providing core hooks.\n//\nvar bitloader = new Bitloader({\n  resolve : resolvePath,\n  fetch   : loadFile,\n  compile : compileModule\n});\n```\n\n## Module Meta\n\nSo what exactly are the pipelines and core hooks processing around, anyways? They are passing around a module meta object, which is a *mutable* object that is modified as it passes through the different pipelines and core hooks. This object is an intermediate representation that the build stage uses to create module instances that the host application ultimately consumes.\n\n> Modifying module meta objects is the primary responsibility of the different pipelines and core hooks.\n\n- **resolve** - uses the module meta `name` to create and set the module meta `path`.\n- **fetch** - loads the module file using the `path` from `resolve`, and sets the module meta `source`.\n- **transform** - processes the module `source` from `fetch`, and sets the module meta `source`.\n- **dependency** - processes the module `source` from `fetch`, and sets the module meta `deps`.\n- **compile** - evaluates the module `source`, and sets the module meta `code`.\n\n\n#### Pipeline Flow\n* create moduleMeta\n* resolve (moduleMeta)\n  * create module path from moduleMeta.name and set moduleMeta.path\n* fetch (moduleMeta)\n  * read module file using moduleMeta.path and set moduleMeta.source\n* transform (moduleMeta)\n  * run custom transforms and set moduleMeta.source\n* dependency (moduleMeta)\n  * parse out dependencies from moduleMeta.source and set moduleMeta.deps\n  * start pipeline flow for each item in moduleMeta.deps before moving on to the next pipeline\n* build (moduleMeta)\n  * compile - evalutes moduleMeta.source\n  * link - calls factory, creates module instance, and sets module.code\n\n<!--\n## Reference diagrams\n\n### Loader diagram\n<img src=\"https://raw.githubusercontent.com/MiguelCastillo/bit-loader/master/img/Loader.png\" alt=\"Loader diagram\" height=\"600px\"></img>\n\n### Fetch diagram\n<img src=\"https://raw.githubusercontent.com/MiguelCastillo/bit-loader/master/img/Loader-Fetch.png\" alt=\"Fetch diagram\" height=\"600px\"></img>\n\n### Pipeline diagram\n<img src=\"https://raw.githubusercontent.com/MiguelCastillo/bit-loader/master/img/Loader-Pipeline.png\" alt=\"Pipeline diagram\" height=\"600px\"></img>\n-->\n",
  "readmeFilename": "README.md",
  "gitHead": "ef2910094765999b298b4e9b5b3c3b3e395ad1c1",
  "_id": "bit-loader@0.2.5",
  "_shasum": "b6dea6e296f23c7e3dac2674774bec99698833a9",
  "_from": "bit-loader@>=0.2.4 <0.3.0"
}
