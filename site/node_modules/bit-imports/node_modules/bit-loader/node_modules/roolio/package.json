{
  "name": "roolio",
  "version": "0.1.0",
  "dependencies": {},
  "main": "src/index.js",
  "scripts": {
    "prepublish": "grunt build",
    "test": "grunt test"
  },
  "devDependencies": {
    "bit-imports": "^0.2.3",
    "browserify": "~10.2.4",
    "chai": "~3.0.0",
    "grunt": "~0.4.5",
    "grunt-banner": "^0.4.0",
    "grunt-browserify": "~3.8.0",
    "grunt-concurrent": "~1.0.1",
    "grunt-contrib-connect": "~0.10.1",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-contrib-uglify": "~0.9.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha": "~0.4.12",
    "grunt-release": "^0.13.0",
    "jshint-stylish": "~2.0.0",
    "minimatch": "git+https://github.com/MiguelCastillo/minimatch",
    "mocha": "~2.2.5",
    "sinon": "~1.15.3",
    "spromise": "^0.9.3"
  },
  "browser": {},
  "directories": {
    "test": "test"
  },
  "description": "Composable rule matcher",
  "repository": {
    "type": "git",
    "url": "https://github.com/MiguelCastillo/roolio"
  },
  "keywords": [
    "rule",
    "matcher",
    "rule",
    "matching",
    "rules"
  ],
  "author": {
    "name": "Miguel Castillo",
    "email": "manchagnu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MiguelCastillo/roolio/issues"
  },
  "homepage": "https://github.com/MiguelCastillo/roolio",
  "readme": "[![Build Status](https://travis-ci.org/MiguelCastillo/roolio.svg?branch=travis-deployment)](https://travis-ci.org/MiguelCastillo/roolio)\n[![Join the chat at https://gitter.im/MiguelCastillo/roolio](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/MiguelCastillo/roolio?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## roolio\n\n> Composable rule matcher\n\nCreate rules to check if data matches a particular criteria. Rules are built with one or more `matcher`s so that you can compose sequences of `matcher`s to test data against. There are a few built in `matcher`s to get you started with, but you can create your own as well.\n\n\n### matchers\n\nAre functions that check if input data matches a criteria. For example, you can check if input data is a string, or if the string is all CAPS.\n\nThere are a few of these default matchers.\n\n\n#### default\n\nThe default matcher will do a regex test if a regex is provided, otherwise it will do a strict equality comparison.\n\n``` javascript\nvar rule = new Rule();\n\nrule.addMatcher(['hello', /hola/]);\n\nrule.match('hello');        // Will test true\nrule.match('hola world');   // Will test true\nrule.match('hello world');  // Will test false\nrule.match('hi world');     // Will test false\n```\n\n#### extension\n\nFile extension matcher, which verifies if an input string has particular file extensions. You can specify one or more file extensions in a single matcher.\n\n``` javascript\nvar rule = new Rule();\n\nrule.addMatcher(Rule.matcher.extension('js|jsx|json'));\n\nrule.match('test.js');   // Will test true\nrule.match('test.jsx');  // Will test true\nrule.match('test.json'); // Will test true\nrule.match('testjs');    // Will test false\nrule.match('test.js.a'); // Will test false\n```\n\n#### string\n\nstring matcher, which verifies if the input string matches one of the matching rules.\n\n``` javascript\nvar rule = new Rule();\n\nrule.addMatcher(Rule.matcher.string('test.js'));\n\nrule.match('test.js');   // Will test true\nrule.match('test.jsx');  // Will test false\nrule.match('test.json'); // Will test false\nrule.match('testjs');    // Will test false\nrule.match('test.js.a'); // Will test false\n```\n\nYou can actually just check if the input is a string.\n\n``` javascript\nvar rule = new Rule();\n\nrule.addMatcher(Rule.matcher.string);\n\nrule.match('some randome string');   // Will test true\nrule.match('');                      // Will test true\nrule.match(true);                    // Will test false\nrule.match(null);                    // Will test false\n```\n\n#### custom rule matchers\n\nRule matchers are just functions. So you can pass in your own functions if you want custom behavior. For example, you can create your own custom matcher to check objects properties.\n\nHere is an arbitrary custom matcher that checks if the first letter of the input string is the same as the first letter of one of the matching rules:\n\n``` javascript\nfunction customMatcher(criteria) {\n  return function(match) {\n    return criteria[0] === match[0];\n  };\n}\n\nvar rule = new Rule();\n\nrule.addMatcher([customMatcher('Standing up'), customMatcher('Dont stand up'));\n\nrule.match('Some randome string');   // Will test true\nrule.match('some randome string');   // Will test false\nrule.match('Dance party');           // Will test true\nrule.match('dance party');           // Will test false\n```\n\n### Rules API\n\n#### addMatcher\n\nFunction that takes a single matching rule, or an array of them. Matching rules added with this method are aggregated, and returns itself to enable chaining.\n\n``` javascript\nvar rule = new Rule();\n\nrule\n  .addMatcher(Rule.matcher.string)\n  .addMatcher(/hello world/);\n```\n\n#### match || matchAny\n\nFunction that takes in data to be matched against the configured matching rules.  Returns whether or not the input matches **one** of the matching rules.\n\n``` javascript\nvar rule = new Rule();\n\n// Match is true\nrule\n  .addMatcher(Rule.matcher.string)\n  .addMatcher(/hello world/);\n  .match('test');\n```\n\n#### matchAll\n\nJust like `match`, but it checks if the input matches **all** the matching rules.\n\n``` javascript\nvar rule = new Rule();\n\n// Match is false\nrule\n  .addMatcher(Rule.matcher.string)\n  .addMatcher(/hello world/);\n  .matchAll('test');\n\n// Match is true\nrule\n  .matchAll('hello world');\n```\n\n\n#### getLength\n\nFunction that returns the number of matchers in a particular rule.\n\n``` javascript\nvar rule = new Rule();\n\n// Length returns 2\nrule\n  .addMatcher(Rule.matcher.string)\n  .addMatcher(/hello world/)\n  .getLength();\n```\n\n## License\n\nLicensed under MIT\n",
  "readmeFilename": "README.md",
  "gitHead": "71782f3cb90b2886b941c9812c7e7a4daf5a8c83",
  "_id": "roolio@0.1.0",
  "_shasum": "10a0d97082e623e019778f0e7541d7fe4a811c23",
  "_from": "roolio@>=0.1.0 <0.2.0"
}
