{
  "name": "promjax",
  "version": "0.0.7",
  "description": "Promise based Ajax",
  "main": "src/ajax.js",
  "scripts": {
    "prepublish": "grunt build",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/MiguelCastillo/promjax.git"
  },
  "keywords": [
    "ajax"
  ],
  "author": {
    "name": "Miguel Castillo",
    "email": "manchagnu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MiguelCastillo/promjax/issues"
  },
  "homepage": "https://github.com/MiguelCastillo/promjax",
  "dependencies": {
    "spromise": "~0.9.1"
  },
  "devDependencies": {
    "browserify": "~8.0.2",
    "grunt": "~0.4.5",
    "grunt-contrib-connect": "~0.9.0",
    "mocha": "~2.1.0",
    "grunt-mocha": "~0.4.11",
    "chai": "~1.10.0",
    "requirejs": "~2.1.15",
    "grunt-contrib-jshint": "~0.11.0",
    "jshint-stylish": "~1.0.1",
    "grunt-contrib-uglify": "~0.8.0"
  },
  "readme": "promjax\n=======\n\nOverly simplified Promise based Ajax provider - xmlhttprequest and promises.  Most of the supported options in promjax are just simple pass through right into the underlying `xmlhttprequest` object.  So if there are specific questions about the options documented here, please feel free to refer to [the doc](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest).  Or go ahead an log an issue and I will be happy to help.\n\n\n### API\n\n#### promjax(options : object)\n\nMethod that will create an `xmlhttprequest` instance to make an Ajax request.\n\n@param {object | string} options - Configuration for the Ajax call.  If `options` is a string, then options is internally coerced to the `url` of the request.\n\n- @property {string} `url` - end point where the ajax request is going to.\n- @property {string} `method` - HTTP verb for the request. Default is `GET`.  There are really no restrictions imposed by `promjax` on the verbs, so whatever is passed in will be used; only limited to what the underlying `xmlhttprequest` implementation supports.\n- @property {object} `data` - Data to be sent along with the request.  No restrictions on this.  Whatever the underlying `xmlhttprequest` supports is what you are limited to.\n- @property {boolean} `async` - flag to make the request synchronous.  It defaults to true.\n- @property {object} `headers` - collection of key/value pair of header name and header value.\n- @property {string} `user` - value as defined by W3C. [MDN link](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- @property {string} `password` - value as defined by W3C. [MDN link](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- @property {string} `responseType` - data type for the response.  Currently, only `json` is supported.  If anything else other than `json` is provided, you will just get the raw `responseText`.  But you can define a `transform` method if you would to pre-process the response before the deferred promise is resolved.\n- @property {function} `transform` - method that is called with the responseText when the Ajax request has completed. The method is called right before the deferred promise is resolved to give you a chance to process your data.  This is really useful when converting response like JSON before the reponse is handed back in the resolved deferred promise.\n\n@returns {Promise}\n\n\n##### example\n\n1. Ajax request with just a string [from unit tests]:\n\n``` javascript\najax(\"SpecRunner.html\")\n  .then(function(response, request) {\n    console.log(response);\n  });\n```\n\n2. Ajax request with an `options` object specifying a `reponseType` [from unit tests]:\n\n``` javascript\najax({\n  url: \"json/artists.json\",\n  responseType: \"json\"\n})\n.then(function(response, request) {\n  console.log(response);\n});\n```\n\n3. Ajax request with an `options` object specifying a `tranform` method [from unit tests]:\n\n``` javascript\najax({\n  url: \"json/artists.json\",\n  transform: JSON.parse\n})\n.then(function(response, request) {\n  console.log(response);\n});\n```\n\n### Install\n\n#### From npm\n\n```\nnpm install promjax\n```\n",
  "readmeFilename": "README.md",
  "_id": "promjax@0.0.7",
  "_from": "promjax@~0.0.3"
}
