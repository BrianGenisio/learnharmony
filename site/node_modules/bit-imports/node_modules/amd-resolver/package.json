{
  "name": "amd-resolver",
  "version": "1.1.0",
  "description": "Resolve AMD module names to File objects suitable to run in the Browser",
  "main": "src/resolver.js",
  "scripts": {
    "prepublish": "gulp build",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/MiguelCastillo/amd-resolver.git"
  },
  "author": {
    "name": "Miguel Castillo",
    "email": "manchagnu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MiguelCastillo/amd-resolver/issues"
  },
  "homepage": "https://github.com/MiguelCastillo/amd-resolver",
  "devDependencies": {
    "bit-imports": "0.2.3",
    "browserify": "~10.2.4",
    "chai": "~3.0.0",
    "grunt": "~0.4.5",
    "grunt-contrib-connect": "~0.10.1",
    "grunt-mocha": "~0.4.12",
    "gulp": "^3.9.0",
    "gulp-jshint": "^1.11.0",
    "gulp-mocha": "^2.1.2",
    "gulp-mocha-phantomjs": "^0.6.1",
    "gulp-webserver": "^0.9.1",
    "jshint-stylish": "^2.0.1",
    "minifyify": "^7.0.1",
    "mocha": "~2.2.5",
    "mocha-phantomjs": "^3.5.3",
    "phantomjs": "^1.9.17",
    "sinon": "~1.15.3",
    "spromise": "^0.9.3",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "readme": "# amd-resolver [![Build Status](https://travis-ci.org/MiguelCastillo/amd-resolver.svg?branch=master)](https://travis-ci.org/MiguelCastillo/amd-resolver) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/MiguelCastillo/amd-resolver?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n>Create module meta objects from module names using configuration options compatible with [RequireJS](http://requirejs.org/docs/api.html#config). Such module meta objects can be used by Module Loaders to download and process module files in the Browser. The module meta format is described [here](#returns-object---module-meta)\n\n### API\n\n#### Resolver(options : object) : constructor\nResolver - provides the means to convert a module name to a module meta object. A module meta object contains information such as a url, which can be used for fetching the module file from a remote sever.\n\n##### Parameters\n\n- **`options`** *{object}* - is a configuration options object with information for creating module meta objects.  It is compatible with requirejs settings for `paths`, `packages`, `baseUrl`, `shim`, and `urlArgs`.\n  - **`baseUrl`** *{string}* - path that every file is relative to.\n  - **`paths`** *{object}* - is an object with key value pairs to map module names to files.\n\n    For example, if you wanted to have a module called `md5` and you wanted to map that to the location of the actual file, you can specify the following:\n\n    ``` javascript\n    {\n      \"paths\": {\n        \"md5\": \"path/to/file/md5\"\n      }\n    }\n    ```\n\n    That will tells resolver that the location for `md5` is `path/to/file/md5.js`.\n\n  - **`packages`** *{array}* - is an array of directory aliases to files. Think npm packages that load `index.js` by default.\n\n    A package can be a string, in which case resolver will generate urls in the form of `packagename/main.js`. That is to say that if you have a package called `machines`, then resolving `machines` will generate a url to `machinge/main.js`.\n\n    Alternatively, a package can be an object which provides more granual control of the resolution process. The following properties are supported:\n\n    - **`location`** *{string}* - which is the location on disk.\n    - **`main`** *{string}* - file name. Provide one if the module file is other than `main.js`.\n    - **`name`** *{string}* - package name.\n\n  - **`shim`** *{object}* - maps code in the global object to modules.  An example of this is `Backbone`, which is loaded into the global object.  So, in order for Module Loaders to load `Backbone`, they need to know how to find `Backbone` in the global object and also know its dependencies (`underscore`) in case `Backbone` needs to be loaded.\n\n    Shims provides two properties:\n\n    - **`exports|name`** *{string}* - The name of the code in the global object.\n    - **`imports|deps`** *{array}* - List of dependencies.  This is important when the shim has not yet been loaded and it requires other modules to be loaded first.\n\n\n##### Example:\n\n``` javascript\nvar resolver = new Resolver({\n  \"urlArgs\": 'bust=' + (new Date()).getTime(),\n  \"baseUrl\": \"../\",\n  \"paths\": {\n    \"mocha\": \"../node_modules/mocha/mocha\",\n    \"chai\": \"../node_modules/chai/chai\"\n  },\n  \"shim\": {\n    \"mocha\": {\n      \"exports\": \"mocha\",\n      \"imports\": [\"sinon\", \"chai\"]\n    }\n  },\n  \"packages\": [\n    \"pacakge1\", {\n      \"main\": \"index.js\"\n    }, {\n      \"location\": \"good/tests\",\n      \"main\": \"index\",\n      \"name\": \"js\"\n    }, {\n      \"location\": \"good/tests\",\n      \"name\": \"lib\"\n    }\n  ]\n});\n```\n\n#### resolve(name : string, baseUrl : string)\n\nCreates a module meta object. If `name` starts with `./`,  `../`, or a protocol, then the resolution process will build a module meta with a URL using the input `baseUrl` (if available). The URL is built using [this](http://nodejs.org/api/url.html#url_url_resolve_from_to) routine. *If* `name` starts with anything else, then the resolution process will use the `baseUrl` configured in the resolver ignoring the one passed it.\n\n##### Parameters\n\n  - **`name`** *{string}* - Name of the module to create a module meta object for. The name can be formatted with plugins such as `css!filename.css`.\n  - **`baseUrl`** *{string}* - URL to be used as a base *only* when the name of the module starts with `./`, `../`, or a protocol.  Otherwise, it is ignored.\n\n##### Returns {object} - module meta\n\n  - **`name`** *{string}* - Name of the module being resolved. Plugin definitions are not included.\n  - **`file`** *{File}* [deprecated] - File object with a URL that can be used to request the module file from a remote server.\n  - **`url`** *{Url}* - Url object that's compliant with [URL Api](https://developer.mozilla.org/en-US/docs/Web/API/URL).\n  - **`plugins`** *{array}* - Array of strings created from the input module `name`. Anything at the beginning of the module `name` that is delimited by a `!` will be processed as a plugin.\n  - **`shim`** *{object}* - Object containing information about modules that exist in the global object. `shim` can specify a couple of things.\n    - **`name`** *{string}* - Name module has in the global space.\n    - **`deps`** *{array}* - Array of string of dependencies that need to be loaded before the shim.\n\n##### Examples:\n\nCreate module meta objects\n``` javascript\nvar mochaModuleMeta    = resolver.resolve(\"mocha\"),\n    package1ModuleMeta = resolver.resolve(\"package1\"),\n    cssModuleMeta      = resolver.resolve(\"css!less!path/to/file.less\");\n```\n\nUrls\n``` javascript\nvar mochaUrl    = mochaModuleMeta.url.href,    // url === \"../node_modules/mocha/mocha.js\"\n    package1Url = package1ModuleMeta.url.href, // url === \"package1/index.js\"\n    cssUrl      = cssModuleMeta.url.href;      // url === \"path/to/file.less\"\n```\n\nPlugins\n``` javascript\nvar cssPlugins = cssModuleMeta.plugins; // plugins === [\"css\", \"less\"]\n```\n\nShim\n``` javascript\nvar mochaShim = mochaModuleMeta.shim; // shim === {name: \"mocha\", deps: [\"sinon\", \"chai\"]}\n```\n\n### Install\n\n#### From npm\n\n```\nnpm install amd-resolver\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "98805e47044b10a90b645f79273012cbfea4d606",
  "_id": "amd-resolver@1.1.0",
  "_shasum": "a07df3b380817ac6933eda3bd5f54f87e44f96c3",
  "_from": "amd-resolver@>=1.1.0 <1.2.0"
}
