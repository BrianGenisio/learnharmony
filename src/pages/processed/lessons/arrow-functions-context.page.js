export var page = {
    "title": "Arrow Functions (context)",
    "navGroup": ".lessons",
    "next": "lessons/destructuring",
    "nextText": "Now, let's learn about variable Destructuring.",
    "heading": "Arrow Functions -- Context",
    "code": "var ctx = { foo: 'bar' };\n\n// this === window\nlet printThis = () => {\n  if (this !== ctx) {\n    console.log(\"Context is not changed\");\n  }\n  else {\n    console.log(\"Context changed\", this);\n  }\n}\n\nprintThis();\nprintThis.call(ctx);\nprintThis.apply(ctx);\nprintThis.bind(ctx)();",
    "intro": "<h3 id=\"how-are-arrow-functions-different-from-regular-functions-\">How are Arrow Functions different from regular functions?</h3>\n<p>There are two differences:</p>\n<ol>\n<li><p><strong>Function context (this) has lexical scope</strong>\nBasically, this means that <code>this</code> is the <code>this</code> from the scope that defines the function, not the context that calls you. Context modifiers (<code>call</code>, <code>apply</code>, <code>bind</code>, etc) have no affect over the value of <code>this</code>.  See the example below</p>\n</li>\n<li><p><strong>Arrow Functions are not constructors</strong>\nYou can&#39;t use the &quot;new&quot; operator on Arrow Functions.  In other words, this will result in a type error:</p>\n<pre><code><span class=\"hljs-reserved\">let</span> NotGood = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {};\n<span class=\"hljs-reserved\">let</span> wontWork = <span class=\"hljs-keyword\">new</span> NotGood();\n</code></pre></li>\n</ol>\n<blockquote>\n<p>Note: this repl loop won&#39;t display this behavior, but don&#39;t let it fool you.  The spec doesn&#39;t allow it.</p>\n</blockquote>\n"
};