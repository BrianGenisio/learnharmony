{
  "name": "babel-bits",
  "version": "0.0.12",
  "main": "src/index.js",
  "scripts": {
    "build": "grunt build",
    "test": "grunt test"
  },
  "dependencies": {
    "babel-core": "~4.5.1"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "sinon": "~1.12.2",
    "browserify": "~9.0.3",
    "jshint-stylish": "~1.0.0",
    "chai": "~1.10.0",
    "mocha": "~2.1.0",
    "grunt-contrib-connect": "~0.9.0",
    "grunt-mocha": "~0.4.11",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-concurrent": "~1.0.0",
    "grunt-browserify": "~3.4.0",
    "grunt-contrib-uglify": "~0.7.0"
  },
  "browser": {},
  "directories": {
    "test": "test"
  },
  "description": "babel (6to5) transform for bit imports",
  "repository": {
    "type": "git",
    "url": "https://github.com/MiguelCastillo/babel-bits.git"
  },
  "keywords": [
    "babel",
    "6to5",
    "bit-runner",
    "bit-imports"
  ],
  "author": {
    "name": "Miguel Castillo",
    "email": "manchagnu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/MiguelCastillo/babel-bits/issues"
  },
  "homepage": "https://github.com/MiguelCastillo/babel-bits",
  "readme": "# babel-bits\n> [babel](https://www.npmjs.com/package/babel-core) plugin for [bit runner](https://github.com/MiguelCastillo/bit-runner) and transform for [bit imports](https://github.com/MiguelCastillo/bit-imports).\n\n### Install\n```\nnpm install babel-bits\n```\n\n### Configuration [bit runner](https://github.com/MiguelCastillo/bit-runner) `bitrunnerfile.js`\n\n#### Run babel\n``` javascript\nvar bitRunner = require('bit-runner');\nvar babel     = require('babel-bits');\n\n/**\n * JavaScript pipeline\n */\nbitRunner.register('default', function buildPipeline(task) {\n  task\n    .load('index.js')\n    .then(babel)\n});\n```\n\n#### Configure and run babel\n\nThe configuration settings are passed right to [babel](https://babeljs.io), so please refer to their [docs](https://babeljs.io/docs/usage/options/) for details on the available options.\n\n``` javascript\nvar bitRunner = require('bit-runner');\nvar babel     = require('babel-bits');\n\n/**\n * JavaScript pipeline\n */\nbitRunner.register('default', function buildPipeline(task) {\n  task\n    .load('index.js')\n    .then(babel.config({ast: false}))\n});\n```\n\n\n### Configuration [bit-imports](https://github.com/MiguelCastillo/bit-imports)\n\n#### Via configuration\n```javascript\nbitimports.config({\n  \"transforms\": [{\n    \"name\": \"node_modules/babel-bits/dist/index.js\",\n    \"options\": {\n      \"ast\": false\n    }\n  }]\n});\n```\n\n#### Via method\n```javascript\nbitimports.transform.use({\n  name: \"node_modules/babel-bits/dist/index.js\",\n  options: {\n    ast: false\n  }\n});\n```\n\n### Note on *generators\n[babel](https://babeljs.io/) needs an external tool called [regenerator](https://github.com/facebook/regenerator) in order to support `generator`s.  To bring `generator` support into your application, you can just load [regenerator](https://github.com/facebook/regenerator) via script tag (or equivalent) and all `generator` code produced by babel will run just fine.  The idea here is that the code produced by babel can find the method `regeneratorRuntime` whenever it is executed.\n\n#### Example with fully configured bit imports running babel with generator support in the browser\n```html\n<script src=\"node_modules/regenerator/runtime.js\"></script>\n<script src=\"node_modules/bit-imports/dist/bit-imports.js\"></script>\n\n<!-- You have to bootstrap an instance of bit imports. -->\n<script>\nvar System = (function() {\n  var importer = bitimports.config({\n    \"paths\": {\n      \"babel\": \"node_modules/babel-bits/dist/index.js\"\n    },\n    \"transforms\": [{\n        name: \"ignore\",\n        handler: ignore,\n        ignore: [\"babel\"]\n      }, {\n        name: \"babel\"\n      }]\n  });\n\n  /**\n   * Simple filter for excluding particular modules from being processed by\n   * the transformation pipeline.\n   */\n  function ignore(moduleMeta) {\n    var ignoreList = this.ignore;\n    return !(ignoreList && ignoreList.length && ignoreList.indexOf(moduleMeta.name) !== -1);\n  }\n\n  return importer;\n}());\n\nvar require = System.require;\n</script>\n\n<!-- Now you can load your ES6 application with support for generators -->\n<script>System.import(\"src/app\");</script>\n```\n",
  "readmeFilename": "README.md",
  "_id": "babel-bits@0.0.12",
  "_from": "babel-bits@~0.0.7"
}
